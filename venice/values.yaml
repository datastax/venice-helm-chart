replicaCount: 1

image:
  client:
    repository: venicedb/venice-client
    pullPolicy: IfNotPresent
    tag: latest
  server:
    repository: venicedb/venice-server
    pullPolicy: IfNotPresent
    tag: latest
  router: 
    repository: venicedb/venice-router
    pullPolicy: IfNotPresent
    tag: latest
  controller:
    repository: venicedb/venice-controller
    pullPolicy: IfNotPresent
    tag: latest

zookeeper:
  address: ''

kafka:
  address: ''
  sasl:
    enabled: false
    username: ""
    password: ""
    readPasswordFromSecret: false
    passwordSecretName: ""
    passwordPath: "/venice/sasl"
    passwordFile: ""
  ssl:
    enabled: false
    tlsSecretName: ""
    certsPath: '/venice/certs'
    # direct setting of the trustore
    truststoreFile: ""    
    truststorePassword: ""
    # automatic conversion from PEM to PCKS12
    convertPEMtoPKCS12: false
    truststorePEMFile: 'ca.crt'
    truststorePEMFileKey: 'tls.key'
authentication:
    enableTokenAuth: false
    # mount the public key for JWT verification from a secret
    publicKeySecretName: ""
    tokenPublicKeyFile: ""
venice:  
  controller:
    replicas: 1
    resources: {}
    configData: {}
    service:
      type: ClusterIP
      ports:
        - port: 5555
          name: http
      annotations: {}
  server:
    replicas: 1
    resources: {}
    configData: {}
    service:
      ports:
        - port: 54093
          name: http
      annotations: {}
  router:
    replicas: 1
    resources: {}
    configData: {}
    ssl:
      enabled: false
      secretName: ""
      # Filename for the .crt file inside the secret
      certificateFilename: ""
      # Filename for the .key file inside the secret
      keyFilename: ""
    service:
      type: ClusterIP
      ports:
      - port: 7777
        name: http
      - port: 7778
        name: https
      annotations: {}
  client:
    replicas: 1
    resources: {}
    configData: {}

metrics:
  enabled: false

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

nodeSelector: {}

tolerations: []

affinity: {}

livenessProbe: false